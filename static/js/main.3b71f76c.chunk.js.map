{"version":3,"sources":["CategoryMenu/index.js","Card/index.js","CardList/index.js","SearchBox/index.js","App.js","serviceWorker.js","index.js"],"names":["CategoryMenu","_ref","onCategoryChange","react_default","a","createElement","className","id","onClick","Card","key","category","filteredData","name","climate","population","model","crew","passengers","birth_year","height","mass","title","episode_id","director","average_lifespan","language","CardList","map","item","i","src_Card_0","reactKey","SearchBox","onSearchChange","type","placeholder","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","searchData","searchField","handleCategoryChange","bind","assertThisInitialized","event","targetID","target","setState","fetchURL","fetch","response","json","data","results","console","log","_context","t0","value","_this$state","filter","result","toLowerCase","includes","src_CategoryMenu_0","length","src_SearchBox_0","src_CardList_0","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3b71f76c.chunk.js","sourcesContent":["import React from 'react';\nimport './index.css';\n\nconst CategoryMenu = ({ onCategoryChange }) => {\n    return (\n        <div className='menu'>\n            <h3 className='menu__header'>Choose a category to search:</h3>\n            <div className='menu__list'>\n                <button className='menu__button' id='planets' onClick={onCategoryChange}>Planets</button>\n                <button className='menu__button' id='starships' onClick={onCategoryChange}>Starships</button>\n                <button className='menu__button' id='vehicles' onClick={onCategoryChange}>Vehicles</button>\n                <button className='menu__button' id='people' onClick={onCategoryChange}>People</button>\n                <button className='menu__button' id='films' onClick={onCategoryChange}>Films</button>\n                <button className='menu__button' id='species' onClick={onCategoryChange}>Species</button>\n            </div>\n        </div>\n    )\n}\n\nexport default CategoryMenu","import React from 'react';\nimport './index.css'\n\nconst Card = ({ key, category, filteredData }) => {\n    switch (category) {\n        case 'planets':\n            return (\n                <div className='card'>\n                    <h1>Name: {filteredData.name}</h1>\n                    <p>Climate: {filteredData.climate}</p>\n                    <p>Population Size: {filteredData.population}</p>\n                </div>\n            )\n        case 'starships':\n            return (\n                <div className='card'>\n                    <h1>Name: {filteredData.name}</h1>\n                    <p>Model: {filteredData.model}</p>\n                    <p>Crew Size: {filteredData.crew}</p>\n                </div>\n            )\n        case 'vehicles':\n            return (\n                <div className='card'>\n                    <h1>Name: {filteredData.name}</h1>\n                    <p>Model: {filteredData.model}</p>\n                    <p>Passengers: {filteredData.passengers}</p>\n                </div>\n            )\n        case 'people':\n            return (\n                <div className='card'>\n                    <h1>Name: {filteredData.name}</h1>\n                    <p>Birth Year: {filteredData.birth_year}</p>\n                    <p>Height: {filteredData.height}</p>\n                    <p>Weight: {filteredData.mass}kg</p>\n                </div>\n            )\n        case 'films':\n            return (\n                <div className='card'>\n                    <h1>Title: {filteredData.title}</h1>\n                    <p>Episode #: {filteredData.episode_id}</p>\n                    <p>Director: {filteredData.director}</p>\n                </div>\n            )\n        case 'species':\n            return (\n                <div className='card'>\n                    <h1>Name: {filteredData.name}</h1>\n                    <p>Average Lifespan: {filteredData.average_lifespan}</p>\n                    <p>Language: {filteredData.language}</p>\n                </div>\n            )\n        default:\n                break;\n    }\n}\n\nexport default Card;","import React from 'react';\nimport Card from '../Card';\nimport './index.css';\n\nconst CardList = ({ category, filteredData }) => {\n    return (\n        <div className='cardlist'>\n            {\n                filteredData.map((item, i) => {\n                    return (\n                        <Card reactKey={i} category={category} filteredData={filteredData[i]} />\n                    )\n                })\n            }\n        </div>\n    )\n}\n\nexport default CardList;","import React from 'react';\nimport './index.css';\n\nconst SearchBox = ({ onSearchChange }) => {\n    return (\n        <div className='search'>\n            <input \n                className='search__input'\n                type='search'\n                placeholder='Search by name or title...'\n                onChange={onSearchChange}\n            />\n        </div>\n    )\n}\n\nexport default SearchBox","import React, { Component } from 'react';\nimport './App.css';\nimport CategoryMenu from './CategoryMenu';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      category: 'none',\n      searchData: [],\n      searchField: ''\n    }\n\n    this.handleCategoryChange = this.handleCategoryChange.bind(this);\n    this.onSearchChange = this.onSearchChange.bind(this);\n  }\n\n  // After choosing category, request data from API, set category state, and store response in state\n  async handleCategoryChange(event) {\n    try {\n      const targetID = event.target.id; // store event so it can be used asynchronously\n\n      // If returning to landing page, reset category and searchField states\n      if (targetID === 'none') {\n        this.setState({\n          category: 'none',\n          searchField: ''\n        });\n      } else {\n\n        const fetchURL = `https://swapi.co/api/${targetID}/?format=json`;\n        const response = await fetch(fetchURL);\n        const data = await response.json();\n\n        this.setState({\n          category: targetID,\n          searchData: data.results\n\n        })\n      }\n    }\n    catch (err) {\n      console.log('Error: ', err);\n    }\n  }\n\n  // Store search input in state as it is typed\n  onSearchChange(event) {\n    this.setState({\n      searchField: event.target.value\n    })\n  }\n\n  render() {\n    const { category, searchData, searchField } = this.state; // deconstruct state for more readable use\n\n    const filteredData = searchData.filter((result => {\n      if (category === 'films') {\n        return result.title.toLowerCase().includes(searchField.toLowerCase());\n      }\n      else if (category === 'none') {\n        return [];\n      }\n      else {\n        return result.name.toLowerCase().includes(searchField.toLowerCase());\n      }\n    }))\n\n    // No category chosen\n    if (category === 'none') {\n      return (\n        <div>\n          <header className='title'>\n            <h1>SWAPI Search</h1>\n          </header>\n          <CategoryMenu onCategoryChange={this.handleCategoryChange} />\n        </div>\n      );\n    }\n    // Category chosen, but retrieving data\n    else if (category !== 'none' && searchData.length === 0) {\n      return <h1 className='title'>LOADING</h1>\n    }\n    // Category chosen with data retrieved\n    else {\n      return (\n        <div>\n          <header className='title'>\n            <h1>SWAPI Search</h1>\n          </header>\n          <SearchBox onSearchChange={this.onSearchChange} />\n          <CardList category={category} filteredData={filteredData} />\n          <button className='button button--center' id='none' onClick={this.handleCategoryChange}>back</button>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}